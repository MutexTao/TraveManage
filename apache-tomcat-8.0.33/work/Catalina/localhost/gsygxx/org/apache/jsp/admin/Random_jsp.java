/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.33
 * Generated at: 2016-11-30 15:38:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.awt.*;
import java.awt.image.*;
import java.util.*;
import javax.imageio.*;

public final class Random_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  
//äº§çéæºé¢è²å½æ°getRandColor
     Color getRandColor(int fc,int bc){
        Random r = new Random();
        if(fc>255) fc=255;
        if(bc>255) bc=255;
        int red=fc+r.nextInt(bc-fc);    //çº¢
        int green=fc+r.nextInt(bc-fc);  //ç»¿
        int blue=fc+r.nextInt(bc-fc);   //è
        return new Color(red,green,blue);
     }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.awt");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.awt.image");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.imageio");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("image/jpeg");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
  
try{
//è®¾ç½®é¡µé¢ä¸ç¼å­  
    response.setHeader("Pragma","No-cache");
    response.setHeader("Cache-Control","no-cache");
    response.setDateHeader("Expires", 0);
    
//åå»ºéæºç±»
    Random r = new Random();

// å¨åå­ä¸­åå»ºå¾åï¼å®½åº¦ä¸ºwidthï¼é«åº¦ä¸ºheight
    int width=60, height=20;
    BufferedImage pic = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

// è·åå¾å½¢ä¸ä¸æç¯å¢
    Graphics gc = pic.getGraphics();

// è®¾å®èæ¯è²å¹¶è¿è¡å¡«å
    gc.setColor(getRandColor(200,250));
    gc.fillRect(0, 0, width, height);

//è®¾å®å¾å½¢ä¸ä¸æç¯å¢å­ä½
    gc.setFont(new Font("Times New Roman",Font.PLAIN,18));

// éæºäº§ç200æ¡å¹²æ°ç´çº¿ï¼ä½¿å¾åä¸­çè®¤è¯ç ä¸æè¢«å¶ä»åæç¨åºæ¢æµå°
    gc.setColor(getRandColor(160,200));
    for (int i=0;i<200;i++){
        int x1 = r.nextInt(width);
        int y1 = r.nextInt(height);
        int x2 = r.nextInt(15);
        int y2 = r.nextInt(15);
        gc.drawLine(x1,y1,x1+x2,y1+y2);
    }
//éæºäº§ç100ä¸ªå¹²æ°ç¹ï¼ä½¿å¾åä¸­çéªè¯ç ä¸æè¢«å¶ä»åæç¨åºæ¢æµå°
	gc.setColor(getRandColor(120,240));
	for (int i=0;i<100;i++) 
	{
	int x = r.nextInt(width); 
	int y = r.nextInt(height); 
	gc.drawOval(x,y,0,0); 
	} 

// éæºäº§ç4ä½æ°å­çéªè¯ç 
    String RS="";
    String rn="";
    for(int i=0;i<4;i++){
        //äº§ç10ä»¥åéæºæ°å­rn
        rn=String.valueOf(r.nextInt(10));
        RS+=rn;
        //å°è®¤è¯ç ç¨drawStringå½æ°æ¾ç¤ºå°å¾åé
        gc.setColor(new Color(20+r.nextInt(110),20+r.nextInt(110),20+r.nextInt(110)));
        gc.drawString(rn,13*i+6,16);
    }

// éæ¾å¾å½¢ä¸ä¸æç¯å¢
    gc.dispose();

// å°è®¤è¯ç RSå­å¥SESSIONä¸­å±äº«
    session.setAttribute("random",RS);

// è¾åºçæåçéªè¯ç å¾åå°é¡µé¢
    ImageIO.write(pic, "JPEG", response.getOutputStream());

    out.clear();
    out = pageContext.pushBody();
}
catch(IllegalStateException e)
{
	System.out.println(e.getMessage());
	e.printStackTrace();
}
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
